const app = require('photoshop').app;
const { openWithModal } = require('./utils');
const fs = require('uxp').storage.localFileSystem;
const {executeAsModal} = require("photoshop").core;
const SolidColor = require("photoshop").app.SolidColor;
const configDat = await(fetch('./config.json'));
const db = require('./db-test');
const config = await configDat.json();
const changeTitle = require('./changeTitle');
const { TEMPLATE_URL, OUTPUT_DIR, SRC_DIR } = config;
const { batchPlay } = require("photoshop").action;

// COLORS
const goldenColor = new SolidColor();
goldenColor.rgb.red = 175;
goldenColor.rgb.green = 134;
goldenColor.rgb.blue = 84;




const mainProcess = async ({ id, cechy, title, subtitle }) => {

    // OPEN DOCUMENTS
    await openWithModal(TEMPLATE_URL);
    await openWithModal(`${SRC_DIR}/${id}.psd`);

    // GET DOCUMENTS AND LAYERS
    const decorationDocument = await app.documents.getByName(`${id}.psd`);
    const templateDocument = await app.documents.getByName('template.psd');
    const decorationLayer = await decorationDocument.layers.getByName(id.toString());

    // COPY DECORATION LAYER
    await decorationLayer.copy();
    await decorationDocument.close('DONOTSAVECHANGES');
    await templateDocument.paste();



    // TITLE
    const titleLayer = templateDocument.layers.getByName('TEKSTY').layers.getByName('TYTUL');
    await changeTitle(titleLayer.id, title);


    // SUBTITLE
    const subtitleLayer = await templateDocument.createTextLayer({
        contents: subtitle,
        fontSize: 22.92,
        fontName: 'lato',
        position: {
            x: titleLayer.boundsNoEffects.left + 3,
            y: titleLayer.boundsNoEffects.bottom + 54
        },
        textColor: goldenColor
    })

    subtitleLayer.name = "PODTYTUL";

    // CECHY

    for(let offset = subtitleLayer.boundsNoEffects.bottom + 12, i = 0; i < cechy.length; i++, offset += 137){

        
            const cechaLayer = templateDocument.layers.getByName('TEKSTY').layers.getByName('PRZEWAGI').layers.getByName(cechy[i]);
             
            cechaLayer.visible = true;
            
            await executeAsModal( async () => {
                await batchPlay(
                    [
                        {
                            "_obj": "select",
                            "_target": [
                                {
                                    "_ref": "layer",
                                    "_name": cechy[i]
                                }
                            ],
                            "makeVisible": false,
                            "layerID": [
                                cechaLayer.id
                            ],
                            "_isCommand": false
                        },

                        
                        {
                            "_obj": "move",
                            "_target": [
                               {
                                "_ref": "layer",
                                "_name": cechy[i]
                               }
                            ],
                            "to": {
                               "_obj": "offset",
                               "horizontal": {
                                  "_unit": "pixelsUnit",
                                  "_value": 54
                               },
                               "vertical": {
                                  "_unit": "pixelsUnit",
                                  "_value": offset
                               }
                            },
                            "_isCommand": false
                         }
    
                    ],
                    {}
                );
            }, { "commandName": "Select cecha layer" });
            
        
    }


    debugger;
    return;


    // SAVE
    // const resultEntry = await fs.createEntryWithUrl(`${OUTPUT_DIR}/${id}.psd`, { overwrite: true });
    // await templateDocument.saveAs.psd(resultEntry);
    // await templateDocument.close('DONOTSAVECHANGES');
}

// MAIN LOOP
for (const entry of db) {
    await mainProcess(entry);  // Await each process
}



